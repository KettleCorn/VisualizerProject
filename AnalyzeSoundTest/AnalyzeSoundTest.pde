/**
  * This sketch demonstrates how to use an FFT to analyze
  * the audio being generated by an AudioPlayer.
  * <p>
  * FFT stands for Fast Fourier Transform, which is a 
  * method of analyzing audio that allows you to visualize 
  * the frequency content of a signal. You've seen 
  * visualizations like this before in music players 
  * and car stereos.
  */

import ddf.minim.analysis.*;
import ddf.minim.*;

Minim       minim;
AudioPlayer jingle;
FFT fftLin;
FFT         fft;
float oldAv = 0;
float flux ;
color mybg;
Ball myBall;
ArrayList<Ball> myBalls = new ArrayList<Ball>();
float[] samples = new float[1024];
float[] spectrum = new float[1024 / 2 + 1];
float[] lastSpectrum = new float[1024 / 2 + 1];
//List<Float> spectralFlux = new ArrayList<Float>( );

void setup()
{
  size(512, 200, P3D);
  minim = new Minim(this);
  
  // specify that we want the audio buffers of the AudioPlayer
  // to be 1024 samples long because our FFT needs to have 
  // a power-of-two buffer size and this is a good size.
  jingle = minim.loadFile("weexist.mp3", 1024);
  
  // loop the file indefinitely
  jingle.loop();
  
  // create an FFT object that has a time-domain buffer 
  // the same size as jingle's sample buffer
  // note that this needs to be a power of two 
  // and that it means the size of the spectrum will be half as large.
  fft = new FFT( jingle.bufferSize(), jingle.sampleRate() );
  fftLin = new FFT( jingle.bufferSize(), jingle.sampleRate() );
  
  // calculate the averages by grouping frequency bands linearly. use 30 averages.
  fftLin.linAverages( 30 );
  mybg = color(0,0,0);
}

void draw()
{
  background(mybg);
  
  // perform a forward FFT on the samples in jingle's mix buffer,
  // which contains the mix of both the left and right channels of the file
  fft.forward( jingle.mix );
  fftLin.forward( jingle.mix);
  System.arraycopy( spectrum, 0, lastSpectrum, 0, spectrum.length ); 
  //System.arraycopy( fft.getSpectrum(), 0, spectrum, 0, spectrum.length );
  flux = 0; 
  float newAv = 0;
  for(int i = 0; i < fftLin.specSize(); i++)
  {
    //println(fft.specSize());
    spectrum[i]= fftLin.getBand(i);
    newAv+= spectrum[i];
    float value = (spectrum[i] - lastSpectrum[i]);      
      flux += value < 0? 0: value;
    // draw the line for frequency band i, scaling it up a bit so we can see it
    
    stroke(255);
    line( i, height, i, height - fft.getBand(i)*8 );
    stroke(color(255,0,0));
  }
    line(0,height-flux*8,width,height-flux*8+3);
   newAv = newAv / fftLin.specSize();
   if(newAv > oldAv *2.2){
  //   mybg = color(random(255), random(255), random(255));
    myBall = new Ball(20);  
    myBall.setX(width);
    myBall.setY(random(height));
    myBalls.add(myBall);
   }
   oldAv = newAv;
   for(int y = myBalls.size()-1; y >= 0; y--){
     myBalls.get(y).left();
     if(myBalls.get(y).offscreen()){
       myBalls.remove(y);
     }else{
       myBalls.get(y).draw();
       if(myBalls.get(y).isat(mouseX,mouseY)){
         mybg = color(255,0,0);
       }
     }
   }
  // println(hex(c));
}
